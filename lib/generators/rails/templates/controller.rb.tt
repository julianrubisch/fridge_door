<% module_namespacing do -%>
class <%= controller_class_name %>Controller < ApplicationController
  before_action :set_<%= singular_table_name %>, only: %i[ show edit update destroy ]

  # GET <%= route_url %>
  def index
    @<%= plural_table_name %> = <%= orm_class.all(class_name) %>

    render Views::<%= singular_table_name.classify.pluralize %>::Index.new(@<%= plural_table_name %>)
  end

  # GET <%= route_url %>/1
  def show
    render Views::<%= singular_table_name.classify.pluralize %>::Show.new(@<%= singular_table_name %>)
  end

  # GET <%= route_url %>/new
  def new
    @<%= singular_table_name %> = <%= orm_class.build(class_name) %>

    render Views::<%= singular_table_name.classify.pluralize %>::New.new(@<%= singular_table_name %>)
  end

  # GET <%= route_url %>/1/edit
  def edit
    render Views::<%= singular_table_name.classify.pluralize %>::Edit.new(@<%= singular_table_name %>)
  end

  # POST <%= route_url %>
  def create
    @<%= singular_table_name %> = <%= orm_class.build(class_name, "#{singular_table_name}_params") %>

    if @<%= orm_instance.save %>
      redirect_to <%= redirect_resource_name %>, notice: <%= %("#{human_name} was successfully created.") %>
    else
      render Views::<%= singular_table_name.classify.pluralize %>::New.new(@<%= singular_table_name %>), status: :unprocessable_entity
    end
  end

  # PATCH/PUT <%= route_url %>/1
  def update
    if @<%= orm_instance.update("#{singular_table_name}_params") %>
      redirect_to <%= redirect_resource_name %>, notice: <%= %("#{human_name} was successfully updated.") %>, status: :see_other
    else
      render Views::<%= singular_table_name.classify.pluralize %>::Edit.new(@<%= singular_table_name %>), status: :unprocessable_entity
    end
  end

  # DELETE <%= route_url %>/1
  def destroy
    @<%= orm_instance.destroy %>
    redirect_to <%= index_helper %>_path, notice: <%= %("#{human_name} was successfully destroyed.") %>, status: :see_other
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_<%= singular_table_name %>
      @<%= singular_table_name %> = <%= orm_class.find(class_name, "params.expect(:id)") %>
    end

    # Only allow a list of trusted parameters through.
    def <%= "#{singular_table_name}_params" %>
      <%- if attributes_names.empty? -%>
      params.fetch(:<%= singular_table_name %>, {})
      <%- else -%>
      params.expect(<%= singular_table_name %>: [ <%= permitted_params %> ])
      <%- end -%>
    end
end
<% end -%>
